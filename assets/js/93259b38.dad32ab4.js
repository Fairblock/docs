"use strict";(self.webpackChunkfairblock_docusaurus=self.webpackChunkfairblock_docusaurus||[]).push([[5521],{538:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var t=i(1527),r=i(7214);const a={sidebar_position:5},o="Conditional Encryption/Decryption",c={id:"advanced/conditional_encryption_decryption",title:"Conditional Encryption/Decryption",description:"In the overview, we saw a general flow for how to interact with fairyring.",source:"@site/docs/advanced/conditional_encryption_decryption.md",sourceDirName:"advanced",slug:"/advanced/conditional_encryption_decryption",permalink:"/docs/advanced/conditional_encryption_decryption",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"fairyport",permalink:"/docs/advanced/fairyport"},next:{title:"Running a node",permalink:"/docs/category/running-a-node"}},d={},s=[];function l(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"conditional-encryptiondecryption",children:"Conditional Encryption/Decryption"}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.a,{href:"/docs/basics/overview.md",children:"overview"}),", we saw a general flow for how to interact with ",(0,t.jsx)(n.code,{children:"fairyring"}),".\nIn particular, the chain provides functionality on requesting specific encryption keys corresponding to conditions set by the developer."]}),"\n",(0,t.jsxs)(n.p,{children:["We provide a more detailed explanation in this section via an example.\nSuppose one wishes to create a sealed-bid auction application.\nA sealed-bid auction is an auction mechanism in which bids submitted to the auction are not made available to the participants during the course of the auction.\nUsing ",(0,t.jsx)(n.code,{children:"fairyring"})," as a mechanism for encrypting the bids, a developer wanting to create this application will take the following steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["For each auction, request a new identity from ",(0,t.jsx)(n.code,{children:"fairyring"}),". This identity will be crucial for encrypting the bids."]}),"\n",(0,t.jsxs)(n.li,{children:["Provide users with some functionality to encrypt their bids. This can be done using our ",(0,t.jsxs)(n.a,{href:"/docs/advanced/encrypt_tx",children:[(0,t.jsx)(n.code,{children:"encrypter"})," tool"]}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Accept and store the encrypted bids within the applcation. This logic will primarily be the responsibility of the application developer."}),"\n",(0,t.jsxs)(n.li,{children:["Have a way to notify ",(0,t.jsx)(n.code,{children:"fairyring"})," that the auction has concluded. This can be built into the application itself (meaning the chain initiates the request for decryption to ",(0,t.jsx)(n.code,{children:"fairyring"}),") or can be a simple keeper that notifies ",(0,t.jsx)(n.code,{children:"fairyring"})," when a certain condition has been met (end of auction)."]}),"\n",(0,t.jsxs)(n.li,{children:["Relay the decryption key from ",(0,t.jsx)(n.code,{children:"fairyring"})," to the application. This can be done using our ",(0,t.jsxs)(n.a,{href:"/docs/advanced/fairyport",children:[(0,t.jsx)(n.code,{children:"fairyport"})," tool"]}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"requesting-a-new-identity",children:"Requesting a new identity"}),"\n",(0,t.jsx)(n.p,{children:"Any user can request a new identity by running the command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"fairyringd tx pep request-general-keyshare 30s --from wallet1 --chain-id fairyring_devnet --home ./devnet_data/fairyring_devnet --keyring-backend test --gas-prices 1ufairy -y 2>&1\n"})}),"\n",(0,t.jsx)(n.h1,{id:"querying-identities",children:"Querying identities"}),"\n",(0,t.jsx)(n.p,{children:"You can also query the chain to find the identities that have been generated via the command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"fairyringd q pep list-keyshare-req\n"})}),"\n",(0,t.jsx)(n.h1,{id:"requesting-a-decryption-key",children:"Requesting a decryption key"}),"\n",(0,t.jsxs)(n.p,{children:["Once encrypted data has been committed by users of your application, you need to notify ",(0,t.jsx)(n.code,{children:"fairyring"})," to generate the decryption key.\nTo start the generation process, one can run the command"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"fairyringd tx pep get-general-keyshare [req-id] --from wallet1 --chain-id fairyring_devnet --home ./devnet_data/fairyring_devnet --keyring-backend test --gas-prices 1ufairy -y 2>&1\n"})}),"\n",(0,t.jsx)(n.p,{children:"One can also then query the generated decryption key by using the same query command as above."}),"\n",(0,t.jsx)(n.h1,{id:"decrypting-and-executing",children:"Decrypting and executing"}),"\n",(0,t.jsxs)(n.p,{children:["Using the generated decryption key, we are now able to decrypt previously encrypted data.\nThe ",(0,t.jsx)(n.code,{children:"x/pep"})," module provides some functionality to automatically handle the decryption and execution of transactions once a particular decryption key is made available."]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},7214:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>o});var t=i(959);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);