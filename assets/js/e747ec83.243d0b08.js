"use strict";(self.webpackChunkfairblock_docusaurus=self.webpackChunkfairblock_docusaurus||[]).push([[2291],{5762:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(1527),t=n(7214);const a={sidebar_position:6},s="Glossary",o={id:"glossary",title:"Glossary",description:"This page contains explanations of common terms used within Fairblock.",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/docs/glossary",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting fairyringclient",permalink:"/docs/faqs/troubleshooting_fairyringclient"}},c={},d=[{value:"General",id:"general",level:2},{value:"Threshold IBE",id:"threshold-ibe",level:3},{value:"Threshold encryption",id:"threshold-encryption",level:3},{value:"Public key",id:"public-key",level:3},{value:"Block height",id:"block-height",level:3},{value:"Derived private key",id:"derived-private-key",level:3},{value:"Frontrunning",id:"frontrunning",level:3},{value:"Public keys",id:"public-keys",level:2},{value:"Active public key",id:"active-public-key",level:3},{value:"Queued public key",id:"queued-public-key",level:3},{value:"Keyshares",id:"keyshares",level:2},{value:"<code>fairyringclient</code>",id:"fairyringclient",level:3},{value:"<code>ShareGenerationClient</code>",id:"sharegenerationclient",level:3},{value:"Malicious validators",id:"malicious-validators",level:3},{value:"Proof of authority",id:"proof-of-authority",level:3}];function l(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{id:"glossary",children:"Glossary"}),"\n",(0,r.jsx)(i.p,{children:"This page contains explanations of common terms used within Fairblock."}),"\n",(0,r.jsx)(i.h2,{id:"general",children:"General"}),"\n",(0,r.jsx)(i.h3,{id:"threshold-ibe",children:"Threshold IBE"}),"\n",(0,r.jsxs)(i.p,{children:["Identity-based encryption is a form of encryption based on some identifying conditions.\nFairblock uses ",(0,r.jsx)(i.strong,{children:"threshold"})," IBE so that no single party controls the decryption keys."]}),"\n",(0,r.jsx)(i.h3,{id:"threshold-encryption",children:"Threshold encryption"}),"\n",(0,r.jsxs)(i.p,{children:["Threshold encryption is a form of cryptography that allows a private key to be derived as long as a certain threshold of network participants come together to aggregate their private keyshares.\nFairblock uses Threshold IBE, which allows validators to generate a share of the private key using their Master Secret Keyshare once a condition (ID) is met on-chain.\nValidators then submit their derived private keyshares to ",(0,r.jsx)(i.code,{children:"fairyring"}),",\nwhich can construct the derived private key once the threshold of validator keyshare submissions is met."]}),"\n",(0,r.jsx)(i.h3,{id:"public-key",children:"Public key"}),"\n",(0,r.jsx)(i.p,{children:"A public key is a large cryptographic value that is used to encrypt data.\nThe public key is publicly visible and used to identify some encrypted data.\nThe public key is derived from the private key, a randomly generated cryptographic value that is needed to decrypt data.\nIn asymmetric encryption and its derivatives, public keys are openly known, while private keys are only made available to owners or receivers of some dataset\nand signify true owners of data.\nIn Fairblock, we use a Master Public Key (MPK) that is used to encrypt every transaction within an epoch.\nThe MPK is discarded after the end of an epoch."}),"\n",(0,r.jsx)(i.h3,{id:"block-height",children:"Block height"}),"\n",(0,r.jsx)(i.p,{children:"The block height is the current length of the blockchain network.\nIt is the number of blocks preceding the current block in a network.\nThe height of the genesis block of a blockchain is zero."}),"\n",(0,r.jsx)(i.h3,{id:"derived-private-key",children:"Derived private key"}),"\n",(0,r.jsx)(i.p,{children:"The derived private key is a unique key corresponding to a certain encryption condition (ID) and is required for a chain to decrypt encrypted transactions.\nThe derived private key is obtained by aggregating a threshold number of derived private keyshares."}),"\n",(0,r.jsx)(i.h3,{id:"frontrunning",children:"Frontrunning"}),"\n",(0,r.jsxs)(i.p,{children:["Frontrunning is an example of bad-MEV (",(0,r.jsx)(i.a,{href:"https://ethereum.org/developers/docs/mev#mev-extraction-generalized-frontrunners",children:(0,r.jsx)(i.code,{children:"maximal extractable value"})}),") where MEV searchers can observe a user's unexecuted profitable trade in a mempool and manipulate the ordering of transactions within a block. The most common type of frontrunning is ",(0,r.jsx)(i.em,{children:"sandwich attacks"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"public-keys",children:"Public keys"}),"\n",(0,r.jsx)(i.h3,{id:"active-public-key",children:"Active public key"}),"\n",(0,r.jsxs)(i.p,{children:["The active public key is the Master Public Key (MPK) that is being used to encrypt every transaction during the current epoch of ",(0,r.jsx)(i.code,{children:"fairyring"}),".\nThe active public key (",(0,r.jsx)(i.code,{children:"ActivePubKey"}),") is replaced by the queued public key (",(0,r.jsx)(i.code,{children:"QueuedPubKey"}),") at the beginning of a new epoch.\nThe MPKs are derived from the Master Secret Key, which is generated by the ",(0,r.jsx)(i.a,{href:"/docs/running-a-node/share_generation_client",children:(0,r.jsx)(i.code,{children:"ShareGenerationClient"})}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"queued-public-key",children:"Queued public key"}),"\n",(0,r.jsxs)(i.p,{children:["The queued public Key (",(0,r.jsx)(i.code,{children:"QueuedPubKey"}),") is the queued MPK that will replace the ",(0,r.jsx)(i.code,{children:"ActivePubKey"})," at the start of a new epoch."]}),"\n",(0,r.jsx)(i.h2,{id:"keyshares",children:"Keyshares"}),"\n",(0,r.jsx)(i.h3,{id:"fairyringclient",children:(0,r.jsx)(i.code,{children:"fairyringclient"})}),"\n",(0,r.jsxs)(i.p,{children:["Every validator on ",(0,r.jsx)(i.code,{children:"fairyring"})," runs ",(0,r.jsx)(i.code,{children:"fairyringclient"}),", which is responsible for updating the MSK share each time it changes,\nderiving the private keyshare from the MSK for each ID (condition for which transactions are encrypted/decrypted),\nand then sending that derived private keyshare to ",(0,r.jsx)(i.code,{children:"fairyring"}),".\nThe submitted keyshares are then used to construct the derived private key."]}),"\n",(0,r.jsx)(i.h3,{id:"sharegenerationclient",children:(0,r.jsx)(i.code,{children:"ShareGenerationClient"})}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"ShareGenerationClient"})," is responsible for generating the MSK and distributing it to the validator network using VSS\n(",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Verifiable_secret_sharing",children:"Verifiable Secret Sharing"}),").\nRefer to ",(0,r.jsx)(i.a,{href:"/docs/advanced/share_generator",children:(0,r.jsx)(i.code,{children:"ShareGenerationClient"})})," for more details."]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Note:"})," The ",(0,r.jsx)(i.code,{children:"ShareGenerationClient"})," will soon be replaced by distributed key generation (DKG)."]}),"\n",(0,r.jsx)(i.h3,{id:"malicious-validators",children:"Malicious validators"}),"\n",(0,r.jsxs)(i.p,{children:["Malicious validators in ",(0,r.jsx)(i.code,{children:"fairyring"})," are designated as malicious if they send incorrect private keyshares to ",(0,r.jsx)(i.code,{children:"fairyring"})," or skip blocks."]}),"\n",(0,r.jsx)(i.h3,{id:"proof-of-authority",children:"Proof of authority"}),"\n",(0,r.jsx)(i.p,{children:"Proof of authority (POA) is a consensus mechanism that gives a vetted, designated number of validators permission to validate transactions on the network."})]})}function h(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},7214:(e,i,n)=>{n.d(i,{Z:()=>o,a:()=>s});var r=n(959);const t={},a=r.createContext(t);function s(e){const i=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:i},e.children)}}}]);